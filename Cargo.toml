[package]
name = "nonos_kernel"
version = "0.2.0"
edition = "2021"
publish = false
license = "AGPL-3.0"
authors = ["eK@nonos.systems"]
description = "NØNOS ZeroState microkernel — RAM-resident, capability-enforced, signed capsules"
repository = "https://github.com/NON-OS/nonos-kernel"
build = "build.rs"

# We use the modern feature resolver to avoid unifying features across deps unexpectedly
resolver = "2"

[[bin]]
name = "nonos_kernel"
path = "src/nonos_main.rs"

[lib]
name = "nonos_kernel_lib"
path = "src/lib.rs"
crate-type = ["staticlib", "rlib"]

######################################################################
# FEATURES — structured, composable, production-first
######################################################################
[features]
# PRODUCTION defaults – security-first, with internal crypto + Kyber768
# Extended with core FS (RAM/VFS/CryptoFS) and minimal networking toggles.
default = [
  # Kernel hardening
  "nonos-syscall-int80",
  "nonos-log-serial",
  "nonos-hash-sha3",
  "nonos-heap-guard",
  "nonos-wx-audit",
  "nonos-page-zero",
  "nonos-kaslr",
  "nonos-nx-stack",
  "nonos-smap-smep",
  "nonos-consttime",
  "nonos-cet",
  # Crypto stack (internal)
  "crypto-core",
  "crypto-aead",
  "crypto-ed25519-int",
  # PQC (vendor via PQClean, default to ML-KEM-768)
  "mlkem768",
  # Filesystem (ZeroState RAM-only + VFS + CryptoFS)
  "fs-ram",
  "fs-vfs",
  "fs-cryptofs",
  # Networking (core interfaces only; sockets optional)
  "net-core",
  # Architecture tag (x86_64 bare-metal)
  "arch-x86_64",
]

# syscall gateways (choose one; INT 0x80 by default)
nonos-syscall-int80 = []
nonos-syscall-msr   = []

# logging backends
nonos-log-serial = []
nonos-log-vga    = []

# memory & hardening toggles
nonos-heap-guard = []
nonos-wx-audit   = []
nonos-page-zero  = []
nonos-kaslr      = []
nonos-pcid       = []
nonos-nx-stack   = []
nonos-smap-smep  = []

# arch/runtime
nonos-apic = []
nonos-smp  = []
arch-x86_64 = []  # explicit architecture feature flag

# capsule loader + crypto (external options remain optional)
nonos-capsule-elf      = ["xmas-elf"]
nonos-hash-sha3        = ["sha3"]
nonos-consttime        = ["subtle"]

# Backward-compat feature alias: use internal Ed25519 by default
# If need to switch to dalek for any reason, enable `crypto-ed25519-dalek`.
nonos-crypto-ed25519 = ["crypto-ed25519-int"]

# advanced hooks
nonos-zk     = []
nonos-onion  = []
nonos-cet    = []
nonos-fallback-entry = []

# networking and additional features
net-log = []
relay_sendme_cell = []
relay_resolve_cell = []
arch_time_timer = []

# CRYPTO GROUPS (internal)
# Core primitives: RNG, BLAKE3, SHA-256/HMAC/HKDF, constant-time utils (internal modules)
crypto-core = []
# AEADs: ChaCha20-Poly1305 and AES-256-GCM (internal)
crypto-aead = []
# Ed25519 (internal, fast scalar-mul path)
crypto-ed25519-int = []
# Ed25519 via dalek (optional alternative)
crypto-ed25519-dalek = ["ed25519-dalek"]

# PQC parameter sets (one must be active; default selects mlkem768)
mlkem512  = []
mlkem768  = []
mlkem1024 = []

# Filesystem features (ZeroState default: RAM-only + VFS + CryptoFS)
# on_disk_fs provides optional on-disk support (AHCI/NVMe/VirtIO) — OFF by default.
fs-ram       = []   # in-memory anonymous FS
fs-vfs       = []   # VFS router/mounts
fs-cryptofs  = []   # RAM-only CryptoFS backend (/secure)
on_disk_fs   = []   # enable on-disk paths (AHCI/NVMe/VirtIO); requires drivers-* features

# Driver toggles (OFF by default; opt-in when enabling on_disk_fs or specific HW)
drivers-ahci       = []
drivers-nvme       = []
drivers-virtio-blk = []
drivers-virtio-net = []

# Networking stack toggles (minimal core enabled by default)
net-core    = []   # core network interfaces/types
net-sockets = []   # userspace socket API
net-ipv4    = []   # IPv4 stack
net-ipv6    = []   # IPv6 stack

# Memory subsystem toggles (augment existing hardening flags)
mem-slab     = []  # optional slab allocator paths
mem-pagecache= []  # FS page cache (RAM-only backing)

# Host-only: enable std for tools/tests when not building the kernel image
std = []

######################################################################
# DEPENDENCIES — all no_std compatible by default
######################################################################
[dependencies]
# architecture / memory mgmt
x86_64 = { version = "0.14", default-features = false, features = ["abi_x86_interrupt", "instructions"] }

# synchronization primitives
spin = { version = "0.9", default-features = false, features = ["mutex", "spin_mutex", "lazy", "rwlock"] }
lazy_static = { version = "1.4", features = ["spin_no_std"] }

# memory alloc + containers
linked_list_allocator = { version = "0.10", default-features = false, features = ["use_spin"] }
hashbrown = { version = "0.14", default-features = false }
arrayvec = { version = "0.7", default-features = false }
smallvec = { version = "1.15", default-features = false }
bitvec = { version = "1.0", default-features = false, features = ["alloc"] }

# crypto (external optional toggles kept for compatibility)
ed25519-dalek = { version = "1", default-features = false, features = ["u64_backend"], optional = true }
sha3           = { version = "0.10", default-features = false, optional = true }
subtle         = { version = "2.5",  default-features = false, optional = true }

# ELF capsule loader (optional)
xmas-elf = { version = "0.9", default-features = false, optional = true }

# misc utils
bitflags = { version = "2.4", default-features = false }
cfg-if   = { version = "1.0", default-features = false }
volatile = { version = "0.4", default-features = false }
heapless = { version = "0.8", default-features = false }
blake3 = { version = "1.0", default-features = false }
bootloader_api = { version = "0.11", default-features = false }

# Optional: host-side tools/tests when `--features std`
[target.'cfg(feature = "std")'.dependencies]
rand = { version = "0.8", default-features = true }

######################################################################
# TARGET-SPECIFIC OVERRIDES (we are bare-metal x86_64)
######################################################################
[target.'cfg(target_arch = "x86_64")'.dependencies]

######################################################################
# BUILD PROFILES — tuned for small, auditable kernels
######################################################################
[profile.dev]
panic = "abort"
opt-level = 0
lto = false
debug = true
codegen-units = 1
overflow-checks = true
incremental = true

# Keep crypto libs fast even in dev if they are used externally
[profile.dev.package."ed25519-dalek"]
opt-level = 3
[profile.dev.package."sha3"]
opt-level = 3

[profile.release]
panic = "abort"
opt-level = 3
lto = "fat"            # aggressive link-time optimization for kernel
strip = "symbols"
debug = false
codegen-units = 1
overflow-checks = false
incremental = false
rpath = false

[profile.release.package."ed25519-dalek"]
opt-level = 3
[profile.release.package."sha3"]
opt-level = 3

######################################################################
# BUILD DEPENDENCIES — build.rs integrates PQClean and embeds manifest/signature
######################################################################
[build-dependencies]
blake3 = { version = "1.5", default-features = false }
cc = "1.1"
glob = "0.3"

# Ensure build scripts remain deterministic/minimal
[profile.dev.build-override]
opt-level = 0
[profile.release.build-override]
opt-level = "z"

######################################################################
# LINTS (Rust >= 1.75) — sane defaults, not overly strict 
######################################################################
[lints.rust]
unused_imports = "warn"
unused_variables = "warn"
missing_docs = "allow"
unreachable_pub = "warn"
unsafe_op_in_unsafe_fn = "warn"
unexpected_cfgs = "deny"

######################################################################
# NONOS METADATA — machine-readable kernel contract
######################################################################
[package.metadata.nonos]
zerostate = true
vm = { higher_half = "0xffff_8000_0000_0000", heap_min = "2MiB" }
security = { wx = true, nx = true, smep = true, smap = true, kaslr = true, cet = true, stack_canaries = true }
caps = ["LOG","YIELD","TIME","IPC","KSTAT"]
abi.syscall.v0 = { numbers = [1, 2, 3, 5], names = ["LOG_WRITE","YIELD","TIME_NOW","KSTAT_READ"] }
capsule = { format = "ELF64", sections = [".text",".rodata",".data",".bss",".nonos.manifest",".nonos.sig"], sig = "ed25519", hash = "sha3-256" }
