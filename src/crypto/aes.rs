/// AES-256 (FIPS-197)

pub struct Aes256 {
    // 15 round keys of 16 bytes each: rk[round][byte]
    round_keys: [[u8; 16]; 15],
}

impl Aes256 {
    pub fn new(key: &[u8; 32]) -> Self {
        let mut aes = Self { round_keys: [[0u8; 16]; 15] };
        aes.expand_key(key);
        aes
    }

    fn expand_key(&mut self, key: &[u8; 32]) {
        // AES-256: Nk=8, Nb=4, Nr=14 => 4*(Nr+1)=60 words
        let mut w = [0u32; 60];
        // initial key
        for i in 0..8 {
            let j = i * 4;
            w[i] = u32::from_be_bytes([key[j], key[j + 1], key[j + 2], key[j + 3]]);
        }
        const RCON: [u8; 7] = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40];
        for i in 8..60 {
            let mut temp = w[i - 1];
            if i % 8 == 0 {
                temp = sub_word(rot_word(temp)) ^ u32::from_be_bytes([RCON[i / 8 - 1], 0, 0, 0]);
            } else if i % 8 == 4 {
                temp = sub_word(temp);
            }
            w[i] = w[i - 8] ^ temp;
        }
        // pack to round keys
        for r in 0..15 {
            let base = r * 4;
            self.round_keys[r][0..4].copy_from_slice(&w[base].to_be_bytes());
            self.round_keys[r][4..8].copy_from_slice(&w[base + 1].to_be_bytes());
            self.round_keys[r][8..12].copy_from_slice(&w[base + 2].to_be_bytes());
            self.round_keys[r][12..16].copy_from_slice(&w[base + 3].to_be_bytes());
        }
    }

    pub fn encrypt_block(&self, plaintext: &[u8; 16]) -> [u8; 16] {
        let mut state = *plaintext;
        add_round_key(&mut state, &self.round_keys[0]);
        for round in 1..14 {
            sub_bytes(&mut state);
            shift_rows(&mut state);
            mix_columns(&mut state);
            add_round_key(&mut state, &self.round_keys[round]);
        }
        sub_bytes(&mut state);
        shift_rows(&mut state);
        add_round_key(&mut state, &self.round_keys[14]);
        state
    }

    pub fn decrypt_block(&self, ciphertext: &[u8; 16]) -> [u8; 16] {
        let mut state = *ciphertext;
        add_round_key(&mut state, &self.round_keys[14]);
        for round in (1..14).rev() {
            inv_shift_rows(&mut state);
            inv_sub_bytes(&mut state);
            add_round_key(&mut state, &self.round_keys[round]);
            inv_mix_columns(&mut state);
        }
        inv_shift_rows(&mut state);
        inv_sub_bytes(&mut state);
        add_round_key(&mut state, &self.round_keys[0]);
        state
    }

    /// AES-CTR: Encrypt/decrypt in-place with 16-byte nonce|counter (big-endian counter).
    pub fn ctr_apply(&self, nonce_counter: &mut [u8; 16], data: &mut [u8]) -> usize {
        let mut offset = 0usize;
        while offset < data.len() {
            let keystream = self.encrypt_block(nonce_counter);
            let chunk = core::cmp::min(16, data.len() - offset);
            for i in 0..chunk {
                data[offset + i] ^= keystream[i];
            }
            offset += chunk;
            increment_be128(nonce_counter);
        }
        offset
    }
}

#[inline]
fn add_round_key(state: &mut [u8; 16], rk: &[u8; 16]) {
    for i in 0..16 {
        state[i] ^= rk[i];
    }
}

#[inline]
fn sub_bytes(state: &mut [u8; 16]) {
    for b in state.iter_mut() {
        *b = SBOX[*b as usize];
    }
}

#[inline]
fn inv_sub_bytes(state: &mut [u8; 16]) {
    for b in state.iter_mut() {
        *b = INV_SBOX[*b as usize];
    }
}

#[inline]
fn shift_rows(state: &mut [u8; 16]) {
    // Row 1: shift left by 1
    let t = state[1];
    state[1] = state[5];
    state[5] = state[9];
    state[9] = state[13];
    state[13] = t;

    // Row 2: shift left by 2
    let (t1, t2) = (state[2], state[6]);
    state[2] = state[10];
    state[6] = state[14];
    state[10] = t1;
    state[14] = t2;

    // Row 3: shift left by 3
    let t = state[3];
    state[3] = state[15];
    state[15] = state[11];
    state[11] = state[7];
    state[7] = t;
}

#[inline]
fn inv_shift_rows(state: &mut [u8; 16]) {
    // Row 1: shift right by 1
    let t = state[13];
    state[13] = state[9];
    state[9] = state[5];
    state[5] = state[1];
    state[1] = t;

    // Row 2: shift right by 2
    let (t1, t2) = (state[2], state[6]);
    state[2] = state[10];
    state[6] = state[14];
    state[10] = t1;
    state[14] = t2;

    // Row 3: shift right by 3
    let t = state[3];
    state[3] = state[7];
    state[7] = state[11];
    state[11] = state[15];
    state[15] = t;
}

#[inline]
fn mix_columns(state: &mut [u8; 16]) {
    for c in 0..4 {
        let i = c * 4;
        let a0 = state[i];
        let a1 = state[i + 1];
        let a2 = state[i + 2];
        let a3 = state[i + 3];
        state[i] = gm(a0, 2) ^ gm(a1, 3) ^ a2 ^ a3;
        state[i + 1] = a0 ^ gm(a1, 2) ^ gm(a2, 3) ^ a3;
        state[i + 2] = a0 ^ a1 ^ gm(a2, 2) ^ gm(a3, 3);
        state[i + 3] = gm(a0, 3) ^ a1 ^ a2 ^ gm(a3, 2);
    }
}

#[inline]
fn inv_mix_columns(state: &mut [u8; 16]) {
    for c in 0..4 {
        let i = c * 4;
        let a0 = state[i];
        let a1 = state[i + 1];
        let a2 = state[i + 2];
        let a3 = state[i + 3];
        state[i] = gm(a0, 14) ^ gm(a1, 11) ^ gm(a2, 13) ^ gm(a3, 9);
        state[i + 1] = gm(a0, 9) ^ gm(a1, 14) ^ gm(a2, 11) ^ gm(a3, 13);
        state[i + 2] = gm(a0, 13) ^ gm(a1, 9) ^ gm(a2, 14) ^ gm(a3, 11);
        state[i + 3] = gm(a0, 11) ^ gm(a1, 13) ^ gm(a2, 9) ^ gm(a3, 14);
    }
}

#[inline]
fn gm(a: u8, b: u8) -> u8 {
    let mut res = 0u8;
    let mut aa = a;
    let mut bb = b;
    while bb != 0 {
        if (bb & 1) != 0 {
            res ^= aa;
        }
        let carry = (aa & 0x80) != 0;
        aa <<= 1;
        if carry {
            aa ^= 0x1B;
        }
        bb >>= 1;
    }
    res
}

#[inline]
fn rot_word(x: u32) -> u32 {
    (x << 8) | (x >> 24)
}

#[inline]
fn sub_word(x: u32) -> u32 {
    let b = x.to_be_bytes();
    let y = [
        SBOX[b[0] as usize],
        SBOX[b[1] as usize],
        SBOX[b[2] as usize],
        SBOX[b[3] as usize],
    ];
    u32::from_be_bytes(y)
}

fn increment_be128(v: &mut [u8; 16]) {
    for i in (0..16).rev() {
        let (sum, carry) = v[i].overflowing_add(1);
        v[i] = sum;
        if !carry {
            break;
        }
    }
}

// AES S-box
const SBOX: [u8; 256] = [
    0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
    0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
    0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
    0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
    0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
    0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
    0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
    0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
    0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
    0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
    0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
    0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
    0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
    0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
    0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
    0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16,
];

// AES Inverse S-box
const INV_SBOX: [u8; 256] = [
    0x52,0x09,0x6a,0xd5,0x30,0x36,0xa5,0x38,0xbf,0x40,0xa3,0x9e,0x81,0xf3,0xd7,0xfb,
    0x7c,0xe3,0x39,0x82,0x9b,0x2f,0xff,0x87,0x34,0x8e,0x43,0x44,0xc4,0xde,0xe9,0xcb,
    0x54,0x7b,0x94,0x32,0xa6,0xc2,0x23,0x3d,0xee,0x4c,0x95,0x0b,0x42,0xfa,0xc3,0x4e,
    0x08,0x2e,0xa1,0x66,0x28,0xd9,0x24,0xb2,0x76,0x5b,0xa2,0x49,0x6d,0x8b,0xd1,0x25,
    0x72,0xf8,0xf6,0x64,0x86,0x68,0x98,0x16,0xd4,0xa4,0x5c,0xcc,0x5d,0x65,0xb6,0x92,
    0x6c,0x70,0x48,0x50,0xfd,0xed,0xb9,0xda,0x5e,0x15,0x46,0x57,0xa7,0x8d,0x9d,0x84,
    0x90,0xd8,0xab,0x00,0x8c,0xbc,0xd3,0x0a,0xf7,0xe4,0x58,0x05,0xb8,0xb3,0x45,0x06,
    0xd0,0x2c,0x1e,0x8f,0xca,0x3f,0x0f,0x02,0xc1,0xaf,0xbd,0x03,0x01,0x13,0x8a,0x6b,
    0x3a,0x91,0x11,0x41,0x4f,0x67,0xdc,0xea,0x97,0xf2,0xcf,0xce,0xf0,0xb4,0xe6,0x73,
    0x96,0xac,0x74,0x22,0xe7,0xad,0x35,0x85,0xe2,0xf9,0x37,0xe8,0x1c,0x75,0xdf,0x6e,
    0x47,0xf1,0x1a,0x71,0x1d,0x29,0xc5,0x89,0x6f,0xb7,0x62,0x0e,0xaa,0x18,0xbe,0x1b,
    0xfc,0x56,0x3e,0x4b,0xc6,0xd2,0x79,0x20,0x9a,0xdb,0xc0,0xfe,0x78,0xcd,0x5a,0xf4,
    0x1f,0xdd,0xa8,0x33,0x88,0x07,0xc7,0x31,0xb1,0x12,0x10,0x59,0x27,0x80,0xec,0x5f,
    0x60,0x51,0x7f,0xa9,0x19,0xb5,0x4a,0x0d,0x2d,0xe5,0x7a,0x9f,0x93,0xc9,0x9c,0xef,
    0xa0,0xe0,0x3b,0x4d,0xae,0x2a,0xf5,0xb0,0xc8,0xeb,0xbb,0x3c,0x83,0x53,0x99,0x61,
    0x17,0x2b,0x04,0x7e,0xba,0x77,0xd6,0x26,0xe1,0x69,0x14,0x63,0x55,0x21,0x0c,0x7d,
];

#[cfg(test)]
mod tests {
    use super::*;

    // NIST SP 800-38A vectors
    #[test]
    fn test_aes256_ecb_block() {
        let key = [
            0x60,0x3d,0xeb,0x10,0x15,0xca,0x71,0xbe,
            0x2b,0x73,0xae,0xf0,0x85,0x7d,0x77,0x81,
            0x1f,0x35,0x2c,0x07,0x3b,0x61,0x08,0xd7,
            0x2d,0x98,0x10,0xa3,0x09,0x14,0xdf,0xf4,
        ];
        let pt = [
            0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,
            0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,
        ];
        let ct_expected = [
            0xf3,0xee,0xd1,0xbd,0xb5,0xd2,0xa0,0x3c,
            0x06,0x4b,0x5a,0x7e,0x3d,0xb1,0x81,0xf8,
        ];
        let aes = Aes256::new(&key);
        let ct = aes.encrypt_block(&pt);
        assert_eq!(ct, ct_expected);
        let rt = aes.decrypt_block(&ct);
        assert_eq!(rt, pt);
    }

    #[test]
    fn test_aes256_ctr_roundtrip() {
        let key = [0x00u8; 32];
        let mut ctr = [0u8; 16];
        ctr[15] = 1; // counter=1
        let mut data = [0u8; 64];
        for i in 0..64 { data[i] = i as u8; }
        let aes = Aes256::new(&key);
        let mut d1 = data;
        aes.ctr_apply(&mut ctr, &mut d1);
        // Decrypt by applying CTR again from same counter start
        let mut ctr2 = [0u8; 16]; ctr2[15] = 1;
        aes.ctr_apply(&mut ctr2, &mut d1);
        assert_eq!(d1, data);
    }
}
